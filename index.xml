<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pankajkumar</title>
    <link>805bluebell.github.io/</link>
    <description>Recent content on pankajkumar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="805bluebell.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My current progress</title>
      <link>805bluebell.github.io/posts/my-current-progress/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/posts/my-current-progress/</guid>
      <description>Past 2018 June - Jan : GATE
Lessons : Glipse of computer science syllabus
2019 Feb - May : Trying to get into Internships
June - Jan : Directi internship
lessons : Breaking into tech internships : Making real world application : Facing consumer demands : Started with competitve programming : Clarity over various technoloiges &amp;amp; what should be learnt
2020 Jan - Xxx : Directi internship continuing
Lessions : Struggling to keep up with competitive programming : Growing very slowly</description>
    </item>
    
    <item>
      <title>Multithreading in C&#43;&#43; &amp; Python</title>
      <link>805bluebell.github.io/posts/multithreading-in-cpp-n-python/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/posts/multithreading-in-cpp-n-python/</guid>
      <description>Is Multithreading really useful  Thread - In computer science, a thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler&amp;hellip; (source : Wikipedia) So, When you divide a program into independently managed pieces of work which can be later combined to have a correct end solution we divide it into chunks called threads.
 But why do we need threads anyway?</description>
    </item>
    
    <item>
      <title>Lessons of Programming - I</title>
      <link>805bluebell.github.io/posts/lessons-of-programming-i/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/posts/lessons-of-programming-i/</guid>
      <description>Lessions learnt  The corner cases of testing cases will annoy you. In geeksforgeeks practice they gave back the case whenever you had a failure in submission. Actual cases in competitive programming will not have that luxury. You&amp;rsquo;ll not have that kind of cushion there. Try to make your own corner cases.  </description>
    </item>
    
    <item>
      <title>Ditch List, use Dict in Python</title>
      <link>805bluebell.github.io/posts/ditch-list-use-dict-in-python/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/posts/ditch-list-use-dict-in-python/</guid>
      <description>So, one day I was using too much list &amp;amp; wondered why we can’t use dict all the time when it has O(1) time complexity. Instead of pondering I tried to measure things myself &amp;amp; see. I ended up measuring access time in a dict &amp;amp; in a list. Below is the code.
import time d = dict() for i in range(10000000): d[i] = True e = list() for i in range(10000000): e.</description>
    </item>
    
    <item>
      <title>Python for competitive programming</title>
      <link>805bluebell.github.io/posts/python-for-competitive-programming/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/posts/python-for-competitive-programming/</guid>
      <description>My first Cookoff Last night I was participating in CodeChef October Cookoff for the first time. It was a good experience even though I could solve one problem completely &amp;amp; two others partially attempted out of total five.
So, there’s a language debate over which should be better for competitive programming. I natively speak in python though I started off with C/C++ family. So, let’s see some comparison over a brute force solution to a problem written in Python (A slow language) and C++ (A fast language).</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>805bluebell.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/about/</guid>
      <description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
 Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.
Setup Some fun facts about Hugo:
 Built in Go Loosely inspired by Jekyll Primarily developed by spf13 on the train while commuting to and from Manhattan. Coded in Vim using spf13-vim  Have questions or suggestions?</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>805bluebell.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/contact/</guid>
      <description>Follow me, @johndoe.</description>
    </item>
    
    <item>
      <title>First snippet</title>
      <link>805bluebell.github.io/snippets/first/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/snippets/first/</guid>
      <description>This content is in snippets/first/index.md
pwd </description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>805bluebell.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/projects/</guid>
      <description>Nothing to see here&amp;hellip; Move along!</description>
    </item>
    
    <item>
      <title>Second snippet</title>
      <link>805bluebell.github.io/snippets/second/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>805bluebell.github.io/snippets/second/</guid>
      <description>This content is in snippets/second/index.md
ls -la </description>
    </item>
    
  </channel>
</rss>