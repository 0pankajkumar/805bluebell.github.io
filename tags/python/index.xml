<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on pankajkumar</title>
    <link>https://805bluebell.github.io/tags/python/</link>
    <description>Recent content in python on pankajkumar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 30 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://805bluebell.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python Global and Local variables</title>
      <link>https://805bluebell.github.io/posts/python-global-and-local-variables/</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://805bluebell.github.io/posts/python-global-and-local-variables/</guid>
      <description>Global &amp;amp; Local Variables in Python </description>
    </item>
    
    <item>
      <title>Recursion limit in Python</title>
      <link>https://805bluebell.github.io/posts/recursion-limit-in-pyhton/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://805bluebell.github.io/posts/recursion-limit-in-pyhton/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Multithreading in C&#43;&#43; &amp; Python</title>
      <link>https://805bluebell.github.io/posts/multithreading-in-cpp-n-python/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://805bluebell.github.io/posts/multithreading-in-cpp-n-python/</guid>
      <description>Is Multithreading really useful  Thread - In computer science, a thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler&amp;hellip; (source : Wikipedia) So, When you divide a program into independently managed pieces of work which can be later combined to have a correct end solution we divide it into chunks called threads.
 But why do we need threads anyway?</description>
    </item>
    
    <item>
      <title>Ditch List, use Dict in Python</title>
      <link>https://805bluebell.github.io/posts/ditch-list-use-dict-in-python/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://805bluebell.github.io/posts/ditch-list-use-dict-in-python/</guid>
      <description>So, one day I was using too much list &amp;amp; wondered why we can’t use dict all the time when it has O(1) time complexity. Instead of pondering I tried to measure things myself &amp;amp; see. I ended up measuring access time in a dict &amp;amp; in a list. Below is the code.
import time d = dict() for i in range(10000000): d[i] = True e = list() for i in range(10000000): e.</description>
    </item>
    
    <item>
      <title>Python for competitive programming</title>
      <link>https://805bluebell.github.io/posts/python-for-competitive-programming/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://805bluebell.github.io/posts/python-for-competitive-programming/</guid>
      <description>My first Cookoff Last night I was participating in CodeChef October Cookoff for the first time. It was a good experience even though I could solve one problem completely &amp;amp; two others partially attempted out of total five.
So, there’s a language debate over which should be better for competitive programming. I natively speak in python though I started off with C/C++ family. So, let’s see some comparison over a brute force solution to a problem written in Python (A slow language) and C++ (A fast language).</description>
    </item>
    
  </channel>
</rss>